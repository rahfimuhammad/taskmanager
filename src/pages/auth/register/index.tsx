import React from 'react'
import { IsSmallScreen } from '@/hooks/useDetectScreen'
import { useRouter } from 'next/router';
import { useAuth } from '@/context/AuthProvider';
import { Box, Button, FormControl, FormErrorMessage, FormLabel, Input, Text, RadioGroup, Radio, Avatar } from '@chakra-ui/react'
import { useFormik } from 'formik';
import * as yup from 'yup'
import SnippetsFilled from '@ant-design/icons/SnippetsFilled'
import Head from "next/head";
import LoadingOutlined from '@ant-design/icons/LoadingOutlined';

const Register = () => {

  const IsSmall = IsSmallScreen()
  const router  = useRouter()
  const { register, authLoading } = useAuth()

  const handleRouter = () => {
    router.push('/auth/login')
  }

  const handleChange = (event: any) => {
    const { target } = event
    formik.setFieldValue(target.name, target.value)
  }

  const handleSubmit = () => {
    register(formik.values)
  }

  const formik = useFormik({
    initialValues: {
        username: "",
        email: "",
        password: "",
        avatar: ""
    },
    onSubmit: handleSubmit,
    validationSchema: yup.object().shape({
        username: yup.string().required().max(11),
        email: yup.string().required().email(),
        password: yup.string().required().min(6),
        avatar: yup.string().required()
    })
  })



  return (
    <>
      <Head>
          <title>Register</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
      <Box
        w='100%'
        h='100vh'
        display='flex'
        justifyContent='center'
        alignItems='center'
        bg='#111111'
        color='white'
      >
        <Box
          w={IsSmall? '90%' : '350px'}
          h='fit-content'
          display='flex'
          justifyContent='center'
          alignItems='center'
          bg='conic-gradient(from 180deg at 50% 50%, #333 0deg, #333 176deg, #61dafb 193deg, #333 217deg, #333 1turn);'
          borderRadius='11px'
          p='1px'
        >
          <Box
            w='100%'
            h='fit-content'
            p='25px 0'
            borderRadius='10px'
            display='flex'
            flexDirection='column'
            justifyContent='center'
            alignItems='center'
            gap='10px'
            bg='linear-gradient(180deg, #242424, #121212 65.62%)'
            boxShadow='0 1px 0 1px rgba(0, 0, 0, .02), 0 4px 6px rgba(0, 0, 0, .02), inset 0 0 0 6px #111'
          >
            <Box
              display='flex'
              gap='5px'
              alignItems='center'
            >
              <SnippetsFilled style={{ color: '#b8bcc4', fontSize: '24px' }} />
              <Text fontSize='20px' color='#b8bcc4' fontWeight='bold'>TaskMe</Text>
            </Box>
            <Text fontSize='20px' color='white' fontWeight='bold'>Register</Text>
            <form
              style={{
                    width: "80%",
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    color: "white",
              }}
              onSubmit={formik.handleSubmit}
            >
              <FormControl isInvalid={formik.errors.username ? true : undefined}>
                <FormLabel>Username</FormLabel>
                <Input
                    name='username'
                    onChange={handleChange}
                    placeholder='johndoe'
                    border='none'
                    bg='#000000'
                    _placeholder={{ opacity: 1, color: '#888' }}
                />
              <FormErrorMessage>{formik.errors.username}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={formik.errors.email ? true : undefined}>
                <FormLabel>Email</FormLabel>
                <Input
                  name='email'
                  onChange={handleChange}
                  placeholder='johndoe@gmail.com'
                  border='none'
                  bg='#000000'
                  _placeholder={{ opacity: 1, color: '#888' }}
                />
                <FormErrorMessage>{formik.errors.email}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={formik.errors.password ? true : undefined}>
                <FormLabel>Password</FormLabel>
                <Input
                  name='password'
                  onChange={handleChange}
                  placeholder='*********'
                  type='password'
                  border='none'
                  bg='#000000'
                  _placeholder={{ opacity: 1, color: '#888' }}
                />
                <FormErrorMessage>{formik.errors.password}</FormErrorMessage>
              </FormControl>
              <FormControl>
                <FormLabel>Choose Avatar</FormLabel>
                <RadioGroup display='flex' gap='10px' name="avatar" defaultValue='1' value={formik.values.avatar} onChange={(value) => formik.setFieldValue('avatar', value)}>
                  <label>
                    <Radio display='none' value="/assets/firstman.png"></Radio>
                    <Avatar src="/assets/firstman.png" size='sm' />
                  </label>
                  <label>
                    <Radio display='none' value="/assets/secondman.png"></Radio>
                    <Avatar src="/assets/secondman.png" size='sm' />
                  </label>
                  <label>
                    <Radio display='none' value="/assets/firstwoman.png"></Radio>
                    <Avatar src="/assets/firstwoman.png" size='sm' />
                  </label>
                  <label>
                    <Radio display='none' value="/assets/secondwoman.png"></Radio>
                    <Avatar src="/assets/secondwoman.png" size='sm' />
                  </label>
                </RadioGroup>
              </FormControl>
              <Button
                  mt='10px'
                  onClick={handleSubmit}
              >
                {authLoading ? <LoadingOutlined /> : 'Register' }
              </Button>
            </form>
            <Box>
              <Text>{"Already have an account? "} 
                <b onClick={handleRouter} style={{cursor: 'pointer'}}>
                  Login
                </b>
              </Text>
            </Box>
          </Box>
        </Box>
      </Box>
    </>
  )
}

export default Register